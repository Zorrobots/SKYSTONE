package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import org.firstinspires.ftc.robotcore.external.JavaUtil;
import com.qualcomm.robotcore.hardware.DcMotorController;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.hardware.modernrobotics.ModernRoboticsI2cRangeSensor;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaSkyStone;
import android.app.Activity;
import android.graphics.Color;
import android.view.View;
import com.qualcomm.robotcore.hardware.ColorSensor;


@Autonomous(name = "NomasAvanzaBlue", group = "PruebaAuto")
public class NomasAvanzaBlue extends LinearOpMode {
   static ElapsedTime tiempo = new ElapsedTime(ElapsedTime.Resolution.MILLISECONDS);
  ColorSensor color;    // Hardware Device Object
  static final int ticks = 1120;
  static double minTarget;
  private DcMotor BR = null;
  private DcMotor BL = null;
  private DcMotor FCR;
  private DcMotor FCL;
  private DcMotor FR = null;
  private DcMotor FL = null;
  private VuforiaSkyStone vuforiaSkyStone;
  private static final String VUFORIA_KEY ="AaX/I1n/////AAABmVP/rT4KqU7rnTNSnwYyVk5ShlTx+0SGRIetEVFV9mW2Wjg1kI6QQNbsMIqDcBaTJ75aZhzzirSLBL+IqeixNQEd56yOcjoBfVA5YurhAOuq1dcnHFJCCRCKqpwnAxXc03brhQdN2QfqzNj1x7JExPa8+PDEp4+JMDHHNoH9bvG1F1j3SvXqqUnkxxRr+nHR2RApBNBEBFte1nWGyZugWH0MlqJ5Xpu3ugtEXJXY5UU3hb0ZPYJm+x4HaDxabaZmbHqc+4u2wUdrWKMkary0rLwJCQb2HmSXv+LoxX94LLOHjv7f1MJGU0Sz0aGeJ3MEIFtTYXLlb8VwmBYp0vz65maHg+33VavjSixw/C3nCmzK";

  @Override
  
  public void runOpMode() {

    float hsvValues[] = {0F,0F,0F};
    final float values[] = hsvValues;
    color = hardwareMap.get(ColorSensor.class, "Color");
    color.enableLed(true);
    
    
    BR = hardwareMap.dcMotor.get("BR");
    BL = hardwareMap.dcMotor.get("BL");
    FCR = hardwareMap.dcMotor.get("FCR");
    FCL = hardwareMap.dcMotor.get("FCL");
    FR = hardwareMap.dcMotor.get("FR");
    FL = hardwareMap.dcMotor.get("FL");

      BR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
      BL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
      FR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
      FL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    FCR.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
    FCL.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

    vuforiaSkyStone = new VuforiaSkyStone();

    // Initialize Vuforia
    telemetry.addData("Status", "Initializing Vuforia. Please wait...");
    telemetry.update();
    initVuforia();
    // Activate here for camera preview.
    vuforiaSkyStone.activate();
    telemetry.addData(">>", "Vuforia initialized, press start to continue...");
    telemetry.update();
        waitForStart();

    if (opModeIsActive()) {
      // Put run blocks here.
      right(0.8, 1.55, 30);
        // Are the targets visible?
        // (Note we only process first visible target).
        
        for(int i = 0; i < 3; i++)
        {
          sleep(1000);
          if(isTargetVisible("Stone Target") == true || i==2) {
            right(1, 0.75, 31);
            move(1, 1.3, 31);
          right(1, 1.5, 31);
          FCR.setPower(1);
          FCL.setPower(-1);
          move(-0.5, -0.9, 31);
          FCR.setPower(0);
          FCL.setPower(0);
          left(1, 2.3, 31);
          BR.setPower(-0.5);
          BL.setPower(0);
          FR.setPower(-0);
          FL.setPower(0);
          
          stopMotors();
          right(1,0.7,30);
          stopMotors();
          if(i == 2)
          {
          move(-1, -4.8, 31);
          }
          else if(i == 1)
          {
            move(-1, -4.1, 31);
          }
          else
          {
            move(-1, -3.4, 31);
          }
          FCR.setPower(-0.15);
          FCL.setPower(0.15);
          move(1, 1.4, 31);
          FCR.setPower(0);
          FCL.setPower(0);
          i = 3;
          }
          else
          {
            move(0.2, 0.7, 31);
          }
        }
        /*
        while(isTargetVisible("Stone Target") == false) {
            BR.setPower(-0.1);
            BL.setPower(0.1);
            FR.setPower(-0.1);
            FL.setPower(0.1);
        }
           BR.setPower(0);
            BL.setPower(0);
            FR.setPower(0);
            FL.setPower(0);
      
        if (isTargetVisible("Stone Target")) {
          processTarget();
          
          while(Double.parseDouble(JavaUtil.formatNumber(displayValue(vuforiaSkyStone.track("Stone Target").y, "CM"), 2)) < -0.5 && isTargetVisible("Stone Target") == true)
          {
            BR.setPower(-0.5);
            BL.setPower(0.5);
            FR.setPower(-0.5);
            FL.setPower(0.5);
          }
          
          stopMotors();
          move(1, 1.5, 31);
          right(1, 2.35, 31);
          FCR.setPower(-1);
          FCL.setPower(1);
          move(-0.5, -0.9, 31);
          FCR.setPower(0);
          FCL.setPower(0);
          left(1, 2.3, 31);
          
          Color.RGBToHSV(color.red() * 8, color.green() * 8, color.blue() * 8, hsvValues);
          BR.setPower(-0.5);
          BL.setPower(0);
          FR.setPower(-0);
          FL.setPower(0);
          
          stopMotors();
          right(1,0.7,30);
          turn(-0.8, -3.5, 31);
          stopMotors();
          //move(-1, -4.5, 31);
          FCR.setPower(0.4);
          FCL.setPower(-0.4);
          move(1, 1.4, 31);
          FCR.setPower(0);
          FCL.setPower(0);
        } 
        
        else {
          telemetry.addData("No Targets Detected", "Targets are not visible.");
        }
        
        telemetry.update();
    }
    */
    // Don't forget to deactivate Vuforia.
    vuforiaSkyStone.deactivate();

    vuforiaSkyStone.close();
    }
}
  /**
   * Describe this function...
   */
  private void initVuforia() {
    // Rotate phone -90 so back camera faces "forward" direction on robot.
    // Assumes landscape orientation
    vuforiaSkyStone.initialize(
        "", // vuforiaLicenseKey
        VuforiaLocalizer.CameraDirection.FRONT, // cameraDirection
        true, // useExtendedTracking
        true, // enableCameraMonitoring
        VuforiaLocalizer.Parameters.CameraMonitorFeedback.AXES, // cameraMonitorFeedback
        0, // dx
        0, // dy
        0, // dz
        0, // xAngle
        -90, // yAngle
        0, // zAngle
        true); // useCompetitionFieldTargetLocations
  }

  /**
   * Check to see if the target is visible.
   */
  private boolean isTargetVisible(String trackableName) {
    // Get vuforia results for target.
    // Is this target visible?
    boolean isVisible;
    if (vuforiaSkyStone.track(trackableName).isVisible) {
      isVisible = true;
    } 
    else {
      isVisible = false;
    }
    return isVisible;
  }

  /**
   * This function displays location on the field and rotation about the Z
   * axis on the field. It uses results from the isTargetVisible function.
   */
  private void processTarget() {
    // Display the target name.
    telemetry.addData("Target Detected", vuforiaSkyStone.track("Stone Target").name + " is visible.");
    telemetry.addData("X (in)", Double.parseDouble(JavaUtil.formatNumber(displayValue(vuforiaSkyStone.track("Stone Target").x, "CM"), 2)));
    telemetry.addData("Y (in)", Double.parseDouble(JavaUtil.formatNumber(displayValue(vuforiaSkyStone.track("Stone Target").y, "CM"), 2)));
    telemetry.addData("Z (in)", Double.parseDouble(JavaUtil.formatNumber(displayValue(vuforiaSkyStone.track("Stone Target").z, "CM"), 2)));
    telemetry.addData("Rotation about Z (deg)", Double.parseDouble(JavaUtil.formatNumber(vuforiaSkyStone.track("Stone Target").zAngle, 2)));
  }

  /**
   * By default, distances are returned in millimeters by Vuforia.
   * Convert to other distance units (CM, M, IN, and FT).
   */
  private double displayValue(float originalValue, String units) {
    // Vuforia returns distances in mm.
    double convertedValue;
    if (units.equals("CM")) {
      convertedValue = originalValue / 10;
    } else if (units.equals("M")) {
      convertedValue = originalValue / 1000;
    } else if (units.equals("IN")) {
      convertedValue = originalValue / 25.4;
    } else if (units.equals("FT")) {
      convertedValue = (originalValue / 25.4) / 12;
    } else {
      convertedValue = originalValue;
    }
    return convertedValue;
  }
   public void stopMotors()
   {
     BR.setPower(0);
     FR.setPower(0);
     BL.setPower(0);
     FL.setPower(0);
   }
   public void move (double power, double numRevolutions, double marginOfError)
  {
    BR.setMode(DcMotor.RunMode.RESET_ENCODERS);
    BL.setMode(DcMotor.RunMode.RESET_ENCODERS);
    FR.setMode(DcMotor.RunMode.RESET_ENCODERS);
    FL.setMode(DcMotor.RunMode.RESET_ENCODERS);
    
    double target = numRevolutions * ticks;
    BR.setTargetPosition((int) target);
    BL.setTargetPosition((int)-target);
    FR.setTargetPosition((int)target);
    FL.setTargetPosition((int)-target);
    BR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    BL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    FR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    FL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    BR.setPower(power);
    BL.setPower(-power);
    FR.setPower(power);
    FL.setPower(-power);

    target = Math.abs(target);
    minTarget = target - marginOfError;
    while(Math.abs(FR.getCurrentPosition())<target && Math.abs(BR.getCurrentPosition())<minTarget)
    {
      telemetry.addData("target", target);
      telemetry.addData("minTarget", minTarget);
      telemetry.addData("BR Encoder", BR.getCurrentPosition());
      telemetry.addData("FR Encoder", FR.getCurrentPosition());          
      telemetry.addData("BL Encoder", BL.getCurrentPosition());
      telemetry.addData("FL Encoder", FL.getCurrentPosition());
      telemetry.update();
    }
    BR.setPower(0);
    BL.setPower(0);
    FR.setPower(0);
    FL.setPower(0);
    
    BR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    BL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    FR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    FL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
  }
  public void left (double power, double numRevolutions, double marginOfError)
  {
    BR.setMode(DcMotor.RunMode.RESET_ENCODERS);
    BL.setMode(DcMotor.RunMode.RESET_ENCODERS);
    FR.setMode(DcMotor.RunMode.RESET_ENCODERS);
    FL.setMode(DcMotor.RunMode.RESET_ENCODERS);
    
    double target = numRevolutions * ticks;
    BR.setTargetPosition((int)target);
    BL.setTargetPosition((int)target);
    FR.setTargetPosition((int)-target);
    FL.setTargetPosition((int)-target);
    BR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    BL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    FR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    FL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    BR.setPower(power);
    BL.setPower(power);
    FR.setPower(-power);
    FL.setPower(-power);
    
    
    target = Math.abs(target);
    minTarget = target - marginOfError;
    while(Math.abs(FR.getCurrentPosition())<target && Math.abs(BR.getCurrentPosition())<minTarget)
    {
      telemetry.addData("target", target);
      telemetry.addData("minTarget", minTarget);
      telemetry.addData("BR Encoder", BR.getCurrentPosition());
      telemetry.addData("FR Encoder", FR.getCurrentPosition());          
      telemetry.addData("BL Encoder", BL.getCurrentPosition());
      telemetry.addData("FL Encoder", FL.getCurrentPosition());
      telemetry.update();
    }
    
    BR.setPower(0);
    BL.setPower(0);
    FR.setPower(0);
    FL.setPower(0);
    
    BR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    BL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    FR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    FL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
  }
  
  public void right (double power, double numRevolutions, double marginOfError)
  {
    BR.setMode(DcMotor.RunMode.RESET_ENCODERS);
    BL.setMode(DcMotor.RunMode.RESET_ENCODERS);
    FR.setMode(DcMotor.RunMode.RESET_ENCODERS);
    FL.setMode(DcMotor.RunMode.RESET_ENCODERS);
    
    double target = numRevolutions * ticks;
    BR.setTargetPosition((int)-target);
    BL.setTargetPosition((int)-target);
    FR.setTargetPosition((int)target);
    FL.setTargetPosition((int)target);
    BR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    BL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    FR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    FL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    BR.setPower(-power);
    BL.setPower(-power);
    FR.setPower(power);
    FL.setPower(power);
    
    
    target = Math.abs(target);
    minTarget = target - marginOfError;
    while(Math.abs(FR.getCurrentPosition())<target && Math.abs(BR.getCurrentPosition())<minTarget)
    {
      telemetry.addData("target", target);
      telemetry.addData("minTarget", minTarget);
      telemetry.addData("BR Encoder", BR.getCurrentPosition());
      telemetry.addData("FR Encoder", FR.getCurrentPosition());          
      telemetry.addData("BL Encoder", BL.getCurrentPosition());
      telemetry.addData("FL Encoder", FL.getCurrentPosition());
      telemetry.update();
    }

    
    BR.setPower(0);
    BL.setPower(0);
    FR.setPower(0);
    FL.setPower(0);
    
    BR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    BL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    FR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    FL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
  }
  
  
   public void turn (double power, double numRevolutions, double marginOfError)
  {
    BR.setMode(DcMotor.RunMode.RESET_ENCODERS);
    BL.setMode(DcMotor.RunMode.RESET_ENCODERS);
    FR.setMode(DcMotor.RunMode.RESET_ENCODERS);
    FL.setMode(DcMotor.RunMode.RESET_ENCODERS);
    
    double target = numRevolutions * ticks;
    BR.setTargetPosition((int)target);
    BL.setTargetPosition((int)target);
    FR.setTargetPosition((int)target);
    FL.setTargetPosition((int)target);
    BR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    BL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    FR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    FL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    BR.setPower(power);
    BL.setPower(power);
    FR.setPower(power);
    FL.setPower(power);

    target = Math.abs(target);
    minTarget = target - marginOfError;
    while(Math.abs(FR.getCurrentPosition())<target && Math.abs(BR.getCurrentPosition())<minTarget)
    {
      telemetry.addData("target", target);
      telemetry.addData("minTarget", minTarget);
      telemetry.addData("BR Encoder", BR.getCurrentPosition());
      telemetry.addData("FR Encoder", FR.getCurrentPosition());          
      telemetry.addData("BL Encoder", BL.getCurrentPosition());
      telemetry.addData("FL Encoder", FL.getCurrentPosition());
      telemetry.update();
    }
    
    BR.setPower(0);
    BL.setPower(0);
    FR.setPower(0);
    FL.setPower(0);
    
    BR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    BL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    FR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    FL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
  }



}
